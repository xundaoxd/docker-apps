#!/usr/bin/env bash

self_path=$(realpath "${BASH_SOURCE[0]:-$0}")
self_dir=$(dirname "$self_path")
proj_dir=$(dirname "$self_dir")
current_dir="$(realpath "$PWD")"
home_dir="$(realpath "$HOME")"

die() {
    echo "$@"
    exit 255
}

base() {
    opt="--network host \
        -u $(id -u):$(id -g) \
        -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e LANG -e GTK_IM_MODULE=xim -e QT_IM_MODULE=xim -e XMODIFIERS"

    if [[ $current_dir != $home_dir* ]]; then
        die "Please run docker app in home dir!!!"
    fi

    if [[ $current_dir == $home_dir/* ]]; then
        opt="$opt -v $proj_dir/.home:$HOME"
        for f in "$home_dir"/*; do
            [[ $current_dir != "$f" ]] && opt="$opt -v $f:$HOME/$(basename "$f"):ro"
        done
    fi

    opt="$opt -v $current_dir:$PWD -w $PWD"

    echo docker run $opt "$@"
    docker run $opt "$@"
}

# nodejs
node() {
    base -ti --rm node:latest node "$@"
}
npm() {
    base -ti --rm node:latest npm "$@"
}
yarn() {
    base -ti --rm node:latest yarn "$@"
}
npx() {
    base -ti --rm node:latest npx "$@"
}

# java
java() {
    base -ti --rm openjdk:latest java "$@"
}
javac() {
    base -ti --rm openjdk:latest javac "$@"
}

# go
go() {
    base -ti --rm --gpus all xundaoxd/ml:latest go "$@"
}

# cuda
mllab() {
    base -ti --rm --gpus all xundaoxd/ml:latest "$@"
}
nvcc() {
    base -ti --rm --gpus all xundaoxd/ml:latest nvcc "$@"
}
nvdisasm() {
    base -ti --rm --gpus all xundaoxd/ml:latest nvdisasm "$@"
}
cuobjdump() {
    base -ti --rm --gpus all xundaoxd/ml:latest cuobjdump "$@"
}
cmake() {
    base -ti --rm --gpus all xundaoxd/ml:latest cmake "$@"
}
bazel() {
    base -ti --rm --gpus all xundaoxd/ml:latest bazel "$@"
}
ipython() {
    base -ti --rm --gpus all xundaoxd/ml:latest \
        ipython "$@"
}
jupyter() {
    base -ti --rm --gpus all xundaoxd/ml:latest \
        jupyter lab --no-browser "$@"
}


# others
xelatex() {
    base -ti --rm texlive/texlive:latest \
        xelatex "$@"
}
obsidian() {
    base -d --rm --gpus all xundaoxd/obsidian obsidian --no-sandbox "$@"
}
octave() {
    base -d --rm --gpus all xundaoxd/ml:latest \
        octave --gui "$@"
}

main() {
    self=$(basename $0)
    $self "$@"
}

main "$@"
